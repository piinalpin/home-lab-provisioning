- name: Setup Kubernetes Environment
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:

    - name: Remove generated ubuntu hosts
      lineinfile:
        path: /etc/hosts
        regexp: "ubuntu-*"
        state: absent
        backup: yes

    - name: Remove generated hosts
      lineinfile:
        path: /etc/hosts
        regexp: ".* {{ hostvars[item]['ansible_hostname']}} {{ hostvars[item]['ansible_hostname']}}"
        state: absent
        backup: yes
      with_items: "{{ ansible_play_batch }}"

    - name: Update hosts
      lineinfile:
        path: /etc/hosts
        regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
        line: "{{ hostvars[item]['ansible_ssh_host'] }}\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}.local"
        state: present
        backup: yes
      with_items: "{{ ansible_play_batch }}"

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: yes

    - name: Install containerd
      apt:
        name: containerd
        state: present

    - name: Ensure /etc/containerd directory exists
      file:
        path: /etc/containerd
        state: directory

    - name: Configure containerd config
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
      with_items:
        - { src: config.toml, dest: /etc/containerd/config.toml }

    - name: Create crictl config
      copy:
        dest: /etc/crictl.yaml
        content: |
          runtime-endpoint: unix:///var/run/containerd/containerd.sock
        force: yes
    
    - name: Ensure net.ipv4.ip_forward is enabled
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
    
    - name: Create modules-load.d directory
      file:
        path: /etc/modules-load.d
        state: directory

    - name: Create k8s.conf for modules to load
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          br_netfilter
        force: yes

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start containerd
      service:
        name: containerd
        state: restarted
        enabled: yes
    
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
    
    - name: Ensure apt keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Delete kubernetes keyrings if exists
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: absent
    
    - name: Add kubernetes APT repository key
      shell: >
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Add kubernetes repository to sources list
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /
        state: present
        filename: kubernetes
        update_cache: yes

    - name: Install Kubernetes binaries
      apt: 
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

- name: Master Node Setup
  hosts: master_nodes
  become: yes
  become_method: sudo
  gather_facts: yes
  vars:
    custom_resource_remote_src: /tmp/calico-custom-resource.yaml
    join_cluster_remote_src: /tmp/joincluster
  tasks:

    - name: Initialize kubernetes cluster
      command: kubeadm init --apiserver-advertise-address="{{ ansible_ssh_host }}" --apiserver-cert-extra-sans="{{ ansible_ssh_host }}" --control-plane-endpoint="{{ ansible_ssh_host }}" --node-name {{ ansible_hostname }} --pod-network-cidr={{ pod_network_cidr }}

    - name: Setup kubeconfig for {{ ansible_user }} user
      command: "{{ item }}"
      with_items:
      - mkdir -p /home/{{ ansible_user }}/.kube
      - cp -i /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      - chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config

    - name: Install calico pod network
      become: false
      command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/tigera-operator.yaml
      register: install_calico_pod_network

    - name: Copy calico custom resource
      template:
        src: calico-custom-resource.yaml.j2
        dest: "{{ custom_resource_remote_src }}"

    - name: Install custom resource pod network
      become: false
      command: kubectl create -f {{ custom_resource_remote_src }}
      register: install_calico_custom_resource
      when: install_calico_pod_network is succeeded

    - name: Generate and save cluster join command
      command: kubeadm token create --print-join-command
      register: join_cluster_command
      when: install_calico_custom_resource is succeeded

    - name: Save join command to file
      template:
        src: joincluster.j2
        dest: "{{ join_cluster_remote_src }}"
      when: join_cluster_command is succeeded

    - name: Fetch joincluster into local file
      fetch:
        src: "{{ join_cluster_remote_src }}"
        dest: files/joincluster
        flat: yes

- name: Worker Node Setup
  hosts: worker_nodes
  become: yes
  become_method: sudo
  gather_facts: yes
  vars:
    join_cluster_remote_src: /tmp/joincluster
  tasks:
    
    - name: Copy the join command to server location
      copy:
        src: joincluster
        dest: "{{ join_cluster_remote_src }}"
        mode: 0777
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    
    - name: Join the node to cluster
      command: sh {{ join_cluster_remote_src }}