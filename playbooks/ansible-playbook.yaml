- name: Setup Kubernetes Environment
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: yes
  roles:
    - role: robertdebock.modprobe
      modprobe_modules:
        - br_netfilter
  tasks:

    - name: Set DEBIAN_FRONTEND environment variable
      set_fact: 
        DEBIAN_FRONTEND: noninteractive

    - name: Remove generated ubuntu hosts
      lineinfile:
        path: /etc/hosts
        regexp: "ubuntu-*"
        state: absent
        backup: yes

    - name: Remove generated hosts
      lineinfile:
        path: /etc/hosts
        regexp: ".* {{ hostvars[item]['ansible_hostname']}} {{ hostvars[item]['ansible_hostname']}}"
        state: absent
        backup: yes
      with_items: "{{ ansible_play_batch }}"

    - name: Update hosts
      lineinfile:
        path: /etc/hosts
        regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
        line: "{{ hostvars[item]['ansible_ssh_host'] }}\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}.local"
        state: present
        backup: yes
      with_items: "{{ ansible_play_batch }}"

    - name: Stop and disable UFW firewall
      service:
        name: ufw
        state: stopped
        enabled: no

    - name: Enable and load kernel modules
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "br_netfilter"
        state: present
        create: yes
    
    - name: Add kernel settings
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
        create: yes

    - name: Apply kernel settings
      command: sysctl --system
    
    - name: Remove package not needed anymore
      apt:
        autoremove: yes

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install required package
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: latest
        update_cache: yes

    - name: Add docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add docker repository to sources list
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
        filename: docker

    - name: Ensure apt keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Delete kubernetes keyrings if exists
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: absent
    
    - name: Add kubernetes APT repository key
      shell: >
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Add kubernetes repository to sources list
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
        state: present
        filename: kubernetes
        update_cache: yes
    
    - name: Install docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
    
    - name: Add docker group
      group:
        name: docker
        state: present

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Create docker daemon directory
      file:
        path: /etc/docker
        state: directory

    - name: Configure docker daemon and containerd
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: docker-daemon.json, dest: /etc/docker/daemon.json }
        - { src: config.toml, dest: /etc/containerd/config.toml }
        - { src: crictl.yaml, dest: /etc/crictl.yaml }
    
    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start containerd
      service:
        name: containerd
        state: restarted
        enabled: yes
    
    - name: Enable and start docker
      service:
        name: docker
        state: restarted
        enabled: yes

    - name: Install kubernetes packages
      apt:
        name:
          - kubelet=1.29.*
          - kubeadm=1.29.*
          - kubectl=1.29.*
        state: present
    
    - name: Update DNS configuration in resolved.conf
      lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: "^#?DNS="
        line: "DNS=8.8.8.8"
        state: present
    
    - name: Restart systemd-resolved service
      service:
        name: systemd-resolved
        state: restarted
    
    - name: Configure SSH
      copy:
        src: k8s
        dest: "{{ ansible_user_dir }}/.ssh/id_rsa"
        mode: "0600"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    
    - name: Add SSH public key into authorized_keys
      authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ lookup('file', 'k8s.pub') }}"

- name: Master Node Setup
  hosts: master_nodes
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:

    - name: Pull required containers
      command: kubeadm config images pull
    
    - name: Initialize kubernetes cluster
      command: kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address={{ hostvars[item]['ansible_ssh_host'] }}
      with_items: "{{ ansible_play_batch }}"

    - name: Deploy calico network
      command: kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f https://docs.projectcalico.org/v3.18/manifests/calico.yaml
      register: deploy_calico_network
    
    - name: Generate and save cluster join command
      command: kubeadm token create --print-join-command > joincluster.sh
      register: join_cluster_command
      when: deploy_calico_network is succeeded

    - name: Fetch joincluster into local file
      fetch:
        src: joincluster.sh
        dest: files/joincluster.sh
        flat: yes

    - name: Create ~/.kube directory
      file:
        path: "{{ ansible_user_dir }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"
    
    - name: Setup kubectl
      command: "cp -i /etc/kubernetes/admin.conf {{ ansible_user_dir }}/.kube/config"
    
    - name: Set ownership for ~/.kube/config
      file:
        path: "{{ ansible_user_dir }}/.kube./config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"

- name: Worker Node Setup
  hosts: worker_nodes
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:
    
    - name: Joining cluster
      copy:
        src: joincluster.sh
        dest: joincluster.sh
        mode: u+x
    
    - name: Execute joincluster.sh
      command: ./joincluster.sh